{"version":3,"sources":["services/apis.ts","styles.ts","components/countdown/styles.ts","components/countdown/index.tsx","components/countdown-input-start/styles.ts","components/countdown-input-start/index.tsx","components/header/styles.ts","components/header/index.tsx","App.tsx","index.tsx"],"names":["Api","themeApiUrl","process","Error","headersInit","Headers","set","fetch","method","headers","response","json","console","log","StyledApp","styled","div","props","theme","global","body_color","text","primary_text_color","StyledCountdownContainer","StyledCountdownTitle","h3","Countdown","duration","days","hours","mins","minutes","sec","seconds","isEvenReached","undefined","StyledCountdownInputStart","CountdownInputStart","value","onChange","StyledHeader","header","background_color","font_color","font_family","StyledImg","img","desktop_logo_width","mobile_logo_width","Header","src","api","App","intervalId","state","countdownFromTargetDate","eventDate","getCountdownDuration","setState","onDatetimeSet","clearInterval","setInterval","moment","diff","now","getTheme","themeData","this","data","React","Component","dotenv","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.500ce4de.chunk.js","sourcesContent":["export interface IApi {\r\n    getTheme: () => Promise<any>;\r\n}\r\n\r\nexport class Api implements IApi {\r\n    public async getTheme(): Promise<any> {\r\n        const themeApiUrl: string = process.env.REACT_APP_THEME_API_URL as string;\r\n\r\n        if(!themeApiUrl) throw new Error('Theme API Url is not specified');\r\n\r\n        try {\r\n          const headersInit: HeadersInit = new Headers();\r\n\r\n          headersInit.set('X-Organization-Id', '1');\r\n\r\n          const response = await fetch(themeApiUrl, {\r\n            method: 'GET',\r\n            headers: headersInit\r\n          });\r\n\r\n          return await response.json()\r\n        } catch (error) {\r\n          console.log(error)\r\n        }\r\n    }\r\n}","import styled from 'styled-components';\r\n\r\nexport const StyledApp = styled.div`\r\n  background: ${props => props.theme.global.body_color};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: start;\r\n  align-items: center;\r\n  height: 100vh;\r\n  color: ${props => props.theme.text.primary_text_color};\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCountdownContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  margin-bottom: 2rem;\r\n  height: 100%;\r\n`;\r\n\r\nexport const StyledCountdownTitle = styled.h3`\r\n  font-size: 2rem;\r\n`;\r\n","import { Duration } from 'moment';\r\nimport React from 'react';\r\nimport { StyledCountdownContainer, StyledCountdownTitle } from './styles';\r\n\r\nexport interface CountdownProps {\r\n  duration?: Duration;\r\n}\r\n\r\nexport const Countdown = (props: CountdownProps) => {\r\n  const duration = props.duration\r\n\r\n  const days = duration && duration.days();\r\n  const hours = duration && duration.hours();\r\n  const mins = duration && duration.minutes();\r\n  const sec = duration && duration.seconds();\r\n\r\n  const isEvenReached = sec !== undefined && sec < 0;\r\n\r\n  return (\r\n    <StyledCountdownContainer>\r\n      <StyledCountdownTitle>\r\n        {duration && sec !== undefined\r\n          ? isEvenReached \r\n            ? 'Event Reached' \r\n            :`${days} days ${hours}:${mins}:${sec}`\r\n          : 'Target Date is Not Specified'}\r\n      </StyledCountdownTitle>\r\n    </StyledCountdownContainer>\r\n  );\r\n};\r\n\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledCountdownInputStart = styled.div`\r\n  margin-bottom: 2rem;\r\n`;\r\n","import { Moment } from 'moment';\r\nimport React from 'react';\r\nimport ReactDatetimeClass from \"react-datetime\";\r\nimport { StyledCountdownInputStart } from './styles';\r\nimport \"react-datetime/css/react-datetime.css\";\r\n\r\nexport interface CountdownInputStartProps {\r\n    onChange: (value: Moment | string) => void;\r\n    value?: Moment;\r\n}\r\n\r\nexport const CountdownInputStart = (props: CountdownInputStartProps) => {\r\n    return (\r\n        <StyledCountdownInputStart>\r\n            <h3>Select Event Datetime</h3>\r\n            <ReactDatetimeClass value={props.value} onChange={props.onChange}></ReactDatetimeClass>\r\n        </StyledCountdownInputStart>\r\n    );\r\n};","import styled from 'styled-components';\r\n\r\nexport const StyledHeader = styled.header`\r\n  background: ${props => props.theme.header.background_color};\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 2rem;\r\n  margin-bottom: 2rem;\r\n  width: 100%;\r\n  text-align: center;\r\n  color: ${props => props.theme.header.font_color};\r\n  font-family: ${props => props.theme.header.font_family};\r\n`;\r\n\r\nexport const StyledImg = styled.img`\r\n  width: ${props => props.theme.header.desktop_logo_width}px;\r\n\r\n  @media (max-width: 768px) {\r\n    width: ${props => props.theme.header.mobile_logo_width}px;\r\n  }\r\n`;","import React from 'react';\r\nimport { StyledHeader, StyledImg} from './styles';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <StyledHeader>\r\n            <StyledImg src=\"koala-logo.png\" />\r\n            <h1>Koala Web Engineer Coding Challenge</h1>\r\n        </StyledHeader>\r\n    );\r\n};","import React from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { Api, IApi } from './services/apis';\r\nimport moment, { Moment, duration, Duration } from 'moment';\r\nimport { StyledApp } from './styles';\r\n// Components\r\nimport { Countdown } from './components/countdown';\r\nimport { CountdownInputStart } from './components/countdown-input-start';\r\nimport { Header } from './components/header';\r\n\r\nconst api: IApi = new Api();\r\n\r\ninterface StateProps {\r\n  theme: any;\r\n  duration?: Duration;\r\n  eventDate?: Moment;\r\n}\r\n\r\nclass App extends React.Component {\r\n  private intervalId: number = 0;\r\n  state: StateProps = {\r\n    theme: null\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const themeData = await api.getTheme();\r\n\r\n      this.setState({ theme: themeData });\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.intervalId);\r\n  }\r\n\r\n  countdownFromTargetDate = (eventDate?: Moment) => () => {\r\n    const duration: Duration | null = this.getCountdownDuration(eventDate);\r\n\r\n    this.setState({ duration });\r\n  }\r\n\r\n  onDatetimeSet = (eventDate?: Moment | string) => {\r\n    this.setState({eventDate});\r\n\r\n    clearInterval(this.intervalId);\r\n\r\n    this.intervalId = setInterval(this.countdownFromTargetDate(moment(eventDate)), 1000);\r\n  }\r\n\r\n  getCountdownDuration = (eventDate?: Moment): Duration | null => eventDate ? duration(eventDate.diff(moment.now())) : null;\r\n    \r\n  render() {\r\n    const data = this.state.theme && this.state.theme.data && this.state.theme.data.data;\r\n\r\n    return (\r\n      this.state.theme && (\r\n        <ThemeProvider theme={data}>\r\n          <StyledApp>\r\n            <Header/>\r\n            <CountdownInputStart value={this.state.eventDate} onChange={this.onDatetimeSet}/>\r\n            <Countdown duration={this.state.duration}/>\r\n          </StyledApp>\r\n        </ThemeProvider>\r\n      )\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}