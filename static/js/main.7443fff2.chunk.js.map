{"version":3,"sources":["services/apis.ts","styles.ts","components/countdown/styles.ts","components/countdown/index.tsx","components/countdown-input-start/styles.ts","components/countdown-input-start/index.tsx","components/header/styles.ts","assets/images/koala-logo.png","components/header/index.tsx","App.tsx","index.tsx"],"names":["Api","themeApiUrl","process","Error","headersInit","Headers","set","fetch","method","headers","response","json","console","log","StyledApp","styled","div","props","theme","global","body_color","text","primary_text_color","StyledCountdownContainer","StyledCountdownTitle","h3","Countdown","countdownTitle","duration","days","hours","mins","minutes","sec","seconds","undefined","isNaN","getCountdownTitle","StyledCountdownInputStart","CountdownInputStart","value","onChange","StyledHeader","header","background_color","font_color","font_family","StyledImg","img","desktop_logo_width","mobile_logo_width","Header","alt","src","logo","api","App","countdownIntervalId","state","handleEventDateSet","eventDate","setState","clearInterval","setInterval","countdownFromEventtDate","moment","getCountdownDuration","diff","now","a","getTheme","themeData","this","data","React","Component","dotenv","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAIaA,EAAb,+HACI,2FACUC,EAAsBC,2EADhC,sBAG2B,IAAIC,MAAM,kCAHrC,wBAMYC,EAA2B,IAAIC,SAEzBC,IAAI,oBAAqB,KAR3C,SAU6BC,MAAMN,EAAa,CACxCO,OAAQ,MACRC,QAASL,IAZjB,cAUYM,EAVZ,iBAemBA,EAASC,OAf5B,2EAiBMC,QAAQC,IAAR,MAjBN,0DADJ,6D,uBCFaC,EAAYC,IAAOC,IAAV,iLACN,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,cAMjC,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,KAAKC,sBCPxBC,EAA2BR,IAAOC,IAAV,8IAQxBQ,EAAuBT,IAAOU,GAAV,gD,OCsBpBC,EAAY,SAACT,GACxB,IACMU,EAlByB,SAACC,GAChC,IAAMC,EAAOD,GAAYA,EAASC,OAC5BC,EAAQF,GAAYA,EAASE,QAC7BC,EAAOH,GAAYA,EAASI,UAC5BC,EAAML,GAAYA,EAASM,UAKjC,OAHsBN,QAAoBO,IAARF,IAAsBG,MAAMH,QAChCE,IAARF,GAAqBA,EAAM,EAI3C,gBADW,UAETJ,EAFS,iBAEIC,EAFJ,kBAEmBC,EAFnB,oBAEmCE,EAFnC,YAGb,+BAKmBI,CADNpB,EAAMW,UAGvB,OACE,cAACL,EAAD,UACE,cAACC,EAAD,CAAsB,cAAY,kBAAlC,SACGG,O,iBCrCIW,EAA4BvB,IAAOC,IAAV,oDCSzBuB,G,MAAsB,SAACtB,GAChC,OACI,eAACqB,EAAD,WACI,uDACA,cAAC,IAAD,CAAoBE,MAAOvB,EAAMuB,MAAOC,SAAUxB,EAAMwB,gBCbvDC,EAAe3B,IAAO4B,OAAV,sQACT,SAAA1B,GAAK,OAAIA,EAAMC,MAAMyB,OAAOC,oBASjC,SAAA3B,GAAK,OAAIA,EAAMC,MAAMyB,OAAOE,cACtB,SAAA5B,GAAK,OAAIA,EAAMC,MAAMyB,OAAOG,eAGhCC,EAAYhC,IAAOiC,IAAV,sGACX,SAAA/B,GAAK,OAAIA,EAAMC,MAAMyB,OAAOM,sBAG1B,SAAAhC,GAAK,OAAIA,EAAMC,MAAMyB,OAAOO,qBCpB1B,MAA0B,uCCI5BC,EAAS,WAClB,OACI,eAACT,EAAD,WACI,cAACK,EAAD,CAAWK,IAAI,aAAaC,IAAKC,IACjC,yECENC,EAAY,IAAIvD,EAQhBwD,E,4MACIC,oBAA8B,E,EACtCC,MAAoB,CAClBxC,MAAO,M,EAkCRyC,mBAAqB,SAACC,GACrB,EAAKC,SAAS,CAACD,cAEfE,cAAc,EAAKL,qBAEnB,EAAKA,oBAAsBM,YAAY,EAAKC,wBAAwBC,IAAOL,IAAa,M,EAS1FI,wBAA0B,SAACJ,GAAD,OAAkC,WAC1D,IAAMhC,EAA4B,EAAKsC,qBAAqBN,GAE5D,EAAKC,SAAS,CAAEjC,e,EAQlBsC,qBAAuB,SAACN,GAAD,OAAyCA,EAAYhC,mBAASgC,EAAUO,KAAKF,IAAOG,QAAU,M,8FAnDrH,4BAAAC,EAAA,+EAE4Bd,EAAIe,WAFhC,OAEUC,EAFV,OAIIC,KAAKX,SAAS,CAAE3C,MAAOqD,IAJ3B,gDAMI3D,QAAQC,IAAR,MANJ,yD,wFAeA,WACEiD,cAAcU,KAAKf,uB,oBAqCrB,WACE,IAAMgB,EAAOD,KAAKd,MAAMxC,OAASsD,KAAKd,MAAMxC,MAAMuD,MAAQD,KAAKd,MAAMxC,MAAMuD,KAAKA,KAEhF,OACED,KAAKd,MAAMxC,OACT,cAAC,IAAD,CAAeA,MAAOuD,EAAtB,SACE,eAAC3D,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAqB0B,MAAOgC,KAAKd,MAAME,UAAWnB,SAAU+B,KAAKb,qBACjE,cAAC,EAAD,CAAW/B,SAAU4C,KAAKd,MAAM9B,oB,GAzE1B8C,IAAMC,WAiFTnB,I,eC9FfoB,EAAOC,SAEPC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7443fff2.chunk.js","sourcesContent":["export interface IApi {\n    getTheme: () => Promise<any>;\n}\n\nexport class Api implements IApi {\n    public async getTheme(): Promise<any> {\n        const themeApiUrl: string = process.env.REACT_APP_THEME_API_URL as string;\n\n        if(!themeApiUrl) throw new Error('Theme API Url is not specified');\n\n        try {\n          const headersInit: HeadersInit = new Headers();\n\n          headersInit.set('X-Organization-Id', '1');\n\n          const response = await fetch(themeApiUrl, {\n            method: 'GET',\n            headers: headersInit\n          });\n\n          return await response.json()\n        } catch (error) {\n          console.log(error)\n        }\n    }\n}","import styled from 'styled-components';\n\nexport const StyledApp = styled.div`\n  background: ${props => props.theme.global.body_color};\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: center;\n  height: 100vh;\n  color: ${props => props.theme.text.primary_text_color};\n`;\n","import styled from 'styled-components';\n\nexport const StyledCountdownContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-bottom: 2rem;\n  height: 100%;\n`;\n\nexport const StyledCountdownTitle = styled.h3`\n  font-size: 2rem;\n`;\n","import { Duration } from 'moment';\nimport React from 'react';\nimport { StyledCountdownContainer, StyledCountdownTitle } from './styles';\n\nexport interface CountdownProps {\n  duration?: Duration;\n}\n\n/**\n * Function that returns string representing current countdown state\n * @param {Duration | null} duration - duration object represented by moment Duration type. \n * Holds data reflacting time distance between now and Future Event Date\n * @returns {string} - If Duration is passed - returns diration in 'd hh:mm:ss' format. \n * If duration is passed and event is in past - returns 'Event Reached.\n * If duration is not passed returns 'Target Date is Not Specified'\n */\nexport const getCountdownTitle = (duration?: Duration) => {\n  const days = duration && duration.days();\n  const hours = duration && duration.hours();\n  const mins = duration && duration.minutes();\n  const sec = duration && duration.seconds();\n\n  const isDurationSet = duration && sec !== undefined && !isNaN(sec)\n  const isEvenReached = sec !== undefined && sec < 0;\n\n  return isDurationSet\n    ? isEvenReached \n      ? 'Event Reached' \n      :`${days} days ${hours} hours ${mins} minutes ${sec} seconds` \n    : 'Target Date is Not Specified';\n}\n\nexport const Countdown = (props: CountdownProps) => {\n  const duration = props.duration;\n  const countdownTitle = getCountdownTitle(duration);\n\n  return (\n    <StyledCountdownContainer>\n      <StyledCountdownTitle data-testid=\"countdown-title\">\n        {countdownTitle}\n      </StyledCountdownTitle>\n    </StyledCountdownContainer>\n  );\n};\n\n","import styled from 'styled-components';\n\nexport const StyledCountdownInputStart = styled.div`\n  margin-bottom: 2rem;\n`;\n","import { Moment } from 'moment';\nimport React from 'react';\nimport ReactDatetimeClass from \"react-datetime\";\nimport { StyledCountdownInputStart } from './styles';\nimport \"react-datetime/css/react-datetime.css\";\n\nexport interface CountdownInputStartProps {\n    onChange: (value: Moment | string) => void;\n    value?: Moment;\n}\n\nexport const CountdownInputStart = (props: CountdownInputStartProps) => {\n    return (\n        <StyledCountdownInputStart>\n            <h3>Select Event Datetime</h3>\n            <ReactDatetimeClass value={props.value} onChange={props.onChange}></ReactDatetimeClass>\n        </StyledCountdownInputStart>\n    );\n};","import styled from 'styled-components';\n\nexport const StyledHeader = styled.header`\n  background: ${props => props.theme.header.background_color};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 2rem;\n  margin-bottom: 2rem;\n  width: 100%;\n  text-align: center;\n  color: ${props => props.theme.header.font_color};\n  font-family: ${props => props.theme.header.font_family};\n`;\n\nexport const StyledImg = styled.img`\n  width: ${props => props.theme.header.desktop_logo_width}px;\n\n  @media (max-width: 768px) {\n    width: ${props => props.theme.header.mobile_logo_width}px;\n  }\n`;","export default __webpack_public_path__ + \"static/media/koala-logo.13787c6c.png\";","import React from 'react';\nimport { StyledHeader, StyledImg} from './styles';\nimport logo from '../../assets/images/koala-logo.png';\n\nexport const Header = () => {\n    return (\n        <StyledHeader>\n            <StyledImg alt=\"koala-logo\" src={logo} />\n            <h1>Koala Web Engineer Coding Challenge</h1>\n        </StyledHeader>\n    );\n};","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { Api, IApi } from './services/apis';\nimport moment, { Moment, duration, Duration } from 'moment';\nimport { StyledApp } from './styles';\n// Components\nimport { Countdown } from './components/countdown';\nimport { CountdownInputStart } from './components/countdown-input-start';\nimport { Header } from './components/header';\n\nconst api: IApi = new Api();\n\ninterface StateProps {\n  theme: any;\n  duration?: Duration;\n  eventDate?: Moment;\n}\n\nclass App extends React.Component {\n  private countdownIntervalId: number = 0;\n  state: StateProps = {\n    theme: null\n  };\n\n  /**\n   * React Hook. \n   * Fetches theme config data before component is mounted.\n   * @returns {void}\n */\n  async componentDidMount() {\n    try {\n      const themeData = await api.getTheme();\n\n      this.setState({ theme: themeData });\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /**\n   * React Hook. \n   * Clears countdown interval when component is being removed from DOM.\n   * @returns {void}\n */\n  componentWillUnmount(){\n    clearInterval(this.countdownIntervalId);\n  }\n\n  /**\n   * Callback function to pass to CountdownInputStart component.\n   * This function is supposed to be called with current context when user selects data/time in datetime picker input.\n   * Function sets eventDate, clears countdown existing interval and sets new interval with new passed date\n   * @param {Moment | null} eventDate - Date in Moment format that represents when Future event is supposed to start.\n   * @returns {void}\n */\n   handleEventDateSet = (eventDate?: Moment | string): void => {\n    this.setState({eventDate});\n\n    clearInterval(this.countdownIntervalId);\n\n    this.countdownIntervalId = setInterval(this.countdownFromEventtDate(moment(eventDate)), 1000);\n  }\n\n  /**\n   * Function that returns a callback function that is used as callback for setInterval function. \n   * Calback function gets duration and sets it to state.\n   * @param {Moment | null} eventDate - Date in Moment format that represents when Future event is supposed to start.\n   * @returns {Function}\n */\n  countdownFromEventtDate = (eventDate?: Moment): Function => () => {\n    const duration: Duration | null = this.getCountdownDuration(eventDate);\n\n    this.setState({ duration });\n  }\n\n  /**\n   * Function that returns calculated duration between Event Date and Now date\n   * @param {Moment | null} eventDate - Date in Moment format that represents when Future event is supposed to start.\n   * @returns {Duration | null}\n */\n  getCountdownDuration = (eventDate?: Moment): Duration | null => eventDate ? duration(eventDate.diff(moment.now())) : null;\n    \n  render() {\n    const data = this.state.theme && this.state.theme.data && this.state.theme.data.data;\n\n    return (\n      this.state.theme && (\n        <ThemeProvider theme={data}>\n          <StyledApp>\n            <Header/>\n            <CountdownInputStart value={this.state.eventDate} onChange={this.handleEventDateSet}/>\n            <Countdown duration={this.state.duration}/>\n          </StyledApp>\n        </ThemeProvider>\n      )\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport dotenv from 'dotenv';\n\ndotenv.config()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}