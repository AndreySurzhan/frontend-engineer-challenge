{"version":3,"sources":["services/apis.ts","styles.ts","components/countdown/styles.ts","components/countdown/index.tsx","components/countdown-input-start/styles.ts","components/countdown-input-start/index.tsx","components/header/styles.ts","assets/images/koala-logo.png","components/header/index.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Api","themeApiUrl","process","Error","headersInit","Headers","set","fetch","method","headers","response","json","console","log","StyledApp","styled","div","props","theme","global","body_color","text","primary_text_color","StyledCountdownContainer","StyledCountdownTitle","h2","Countdown","countdownTitle","duration","isValid","days","hours","mins","minutes","sec","seconds","undefined","isNaN","getCountdownTitle","StyledCountdownInputStart","CountdownInputStart","value","onChange","StyledHeader","header","background_color","font_color","font_family","StyledImg","img","desktop_logo_width","mobile_logo_width","Header","alt","src","logo","api","App","countdownIntervalId","state","handleEventDateSet","eventDate","setState","clearInterval","setInterval","countdownFromEventtDate","moment","getCountdownDuration","diff","now","a","getTheme","themeData","this","data","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","dotenv","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9c45aeb6.chunk.js","sourcesContent":["export interface IApi {\n    getTheme: () => Promise<any>;\n}\n\nexport class Api implements IApi {\n    public async getTheme(): Promise<any> {\n        const themeApiUrl: string = process.env.REACT_APP_THEME_API_URL as string;\n\n        if(!themeApiUrl) throw new Error('Theme API Url is not specified');\n\n        try {\n          const headersInit: HeadersInit = new Headers();\n\n          headersInit.set('X-Organization-Id', '1');\n\n          const response = await fetch(themeApiUrl, {\n            method: 'GET',\n            headers: headersInit\n          });\n\n          return await response.json()\n        } catch (error) {\n          console.log(error)\n        }\n    }\n}","import styled from 'styled-components';\n\nexport const StyledApp = styled.div`\n  background: ${props => props.theme.global.body_color};\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: center;\n  height: 100vh;\n  color: ${props => props.theme.text.primary_text_color};\n`;\n","import styled from 'styled-components';\n\nexport const StyledCountdownContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 2rem;\n  height: 100%;\n`;\n\nexport const StyledCountdownTitle = styled.h2`\n  font-size: 2rem;\n  text-align: center;\n`;\n","import { Duration } from 'moment';\nimport React from 'react';\nimport { StyledCountdownContainer, StyledCountdownTitle } from './styles';\n\nexport interface CountdownProps {\n  duration?: Duration;\n}\n\n/**\n * Function that returns string representing current countdown state\n * @param {Duration | null} duration - duration object represented by moment Duration type. \n * Holds data reflacting time distance between now and Future Event Date\n * @returns {string} - If Duration is passed - returns diration in 'd hh:mm:ss' format. \n * If duration is passed and event is in past - returns 'Event Reached.\n * If duration is not passed returns 'Target Date is Not Specified'\n */\nexport const getCountdownTitle = (duration?: Duration) => {\n  if(!duration || !duration.isValid()) return 'Target Date is Not Specified';\n\n  const days: number = duration.days();\n  const hours: number = duration.hours();\n  const mins: number = duration.minutes();\n  const sec: number = duration.seconds();\n\n  const isEvenReached: boolean = sec !== undefined && !isNaN(sec) && sec <= 0;\n\n  return isEvenReached \n      ? 'Event Reached' \n      :`${days} days ${hours} hours ${mins} minutes ${sec} seconds`;\n}\n\nexport const Countdown = (props: CountdownProps) => {\n  const duration = props.duration;\n  const countdownTitle = getCountdownTitle(duration);\n\n  return (\n    <StyledCountdownContainer>\n      <StyledCountdownTitle data-testid=\"countdown-title\">\n        {countdownTitle}\n      </StyledCountdownTitle>\n    </StyledCountdownContainer>\n  );\n};\n\n","import styled from 'styled-components';\n\nexport const StyledCountdownInputStart = styled.div`\n  margin-bottom: 2rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import { Moment } from 'moment';\nimport React from 'react';\nimport ReactDatetimeClass from \"react-datetime\";\nimport { StyledCountdownInputStart } from './styles';\nimport \"react-datetime/css/react-datetime.css\";\n\nexport interface CountdownInputStartProps {\n    onChange: (value: Moment | string) => void;\n    value?: Moment;\n}\n\nexport const CountdownInputStart = (props: CountdownInputStartProps) => {\n    return (\n        <StyledCountdownInputStart>\n            <h2>Select Event Datetime</h2>\n            <ReactDatetimeClass value={props.value} onChange={props.onChange}></ReactDatetimeClass>\n        </StyledCountdownInputStart>\n    );\n};","import styled from 'styled-components';\n\nexport const StyledHeader = styled.header`\n  background: ${props => props.theme.header.background_color};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 2rem;\n  margin-bottom: 2rem;\n  width: 100%;\n  text-align: center;\n  color: ${props => props.theme.header.font_color};\n  font-family: ${props => props.theme.header.font_family};\n`;\n\nexport const StyledImg = styled.img`\n  width: ${props => props.theme.header.desktop_logo_width}px;\n\n  @media (max-width: 768px) {\n    width: ${props => props.theme.header.mobile_logo_width}px;\n  }\n`;","export default __webpack_public_path__ + \"static/media/koala-logo.13787c6c.png\";","import React from 'react';\nimport { StyledHeader, StyledImg} from './styles';\nimport logo from '../../assets/images/koala-logo.png';\n\nexport const Header = () => {\n    return (\n        <StyledHeader>\n            <StyledImg alt=\"koala-logo\" src={logo} />\n            <h1>Koala Web Engineer Coding Challenge</h1>\n        </StyledHeader>\n    );\n};","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { Api, IApi } from './services/apis';\nimport moment, { Moment, duration, Duration } from 'moment';\nimport { StyledApp } from './styles';\n// Components\nimport { Countdown } from './components/countdown';\nimport { CountdownInputStart } from './components/countdown-input-start';\nimport { Header } from './components/header';\n\nconst api: IApi = new Api();\n\ninterface StateProps {\n  theme: any;\n  duration?: Duration;\n  eventDate?: Moment;\n}\n\nclass App extends React.Component {\n  private countdownIntervalId: number = 0;\n  state: StateProps = {\n    theme: null\n  };\n\n  /**\n   * React Hook. \n   * Fetches theme config data before component is mounted.\n   * @returns {void}\n */\n  async componentDidMount() {\n    try {\n      const themeData = await api.getTheme();\n\n      this.setState({ theme: themeData });\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /**\n   * React Hook. \n   * Clears countdown interval when component is being removed from DOM.\n   * @returns {void}\n */\n  componentWillUnmount(){\n    clearInterval(this.countdownIntervalId);\n  }\n\n  /**\n   * Callback function to pass to CountdownInputStart component.\n   * This function is supposed to be called with current context when user selects data/time in datetime picker input.\n   * Function sets eventDate, clears countdown existing interval and sets new interval with new passed date\n   * @param {Moment | null} eventDate - Date in Moment format that represents when Future event is supposed to start.\n   * @returns {void}\n */\n   handleEventDateSet = (eventDate?: Moment | string): void => {\n    this.setState({eventDate});\n\n    clearInterval(this.countdownIntervalId);\n\n    this.countdownIntervalId = setInterval(this.countdownFromEventtDate(moment(eventDate)), 1000);\n  }\n\n  /**\n   * Function that returns a callback function that is used as callback for setInterval function. \n   * Calback function gets duration and sets it to state.\n   * @param {Moment | null} eventDate - Date in Moment format that represents when Future event is supposed to start.\n   * @returns {Function}\n */\n  countdownFromEventtDate = (eventDate?: Moment): Function => () => {\n    const duration: Duration | null = this.getCountdownDuration(eventDate);\n\n    this.setState({ duration });\n  }\n\n  /**\n   * Function that returns calculated duration between Event Date and Now date\n   * @param {Moment | null} eventDate - Date in Moment format that represents when Future event is supposed to start.\n   * @returns {Duration | null}\n */\n  getCountdownDuration = (eventDate?: Moment): Duration | null => eventDate ? duration(eventDate.diff(moment.now())) : null;\n    \n  render() {\n    const data = this.state.theme && this.state.theme.data && this.state.theme.data.data;\n\n    return (\n      this.state.theme && (\n        <ThemeProvider theme={data}>\n          <StyledApp>\n            <Header/>\n            <CountdownInputStart value={this.state.eventDate} onChange={this.handleEventDateSet}/>\n            <Countdown duration={this.state.duration}/>\n          </StyledApp>\n        </ThemeProvider>\n      )\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport dotenv from 'dotenv';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\ndotenv.config()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}