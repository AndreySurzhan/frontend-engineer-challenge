{"version":3,"sources":["services/apis.ts","styles.ts","components/countdown/styles.ts","components/countdown/index.tsx","components/countdown-input-start/styles.ts","components/countdown-input-start/index.tsx","components/header/styles.ts","components/header/index.tsx","App.tsx","index.tsx"],"names":["Api","themeApiUrl","process","Error","headersInit","Headers","set","fetch","method","headers","response","json","console","log","StyledApp","styled","div","props","theme","global","body_color","text","primary_text_color","StyledCountdownContainer","StyledCountdownTitle","h3","Countdown","duration","days","hours","mins","minutes","sec","seconds","isEvenReached","undefined","StyledCountdownInputStart","CountdownInputStart","value","onChange","StyledHeader","header","background_color","font_color","font_family","StyledImg","img","desktop_logo_width","mobile_logo_width","Header","src","api","App","intervalId","state","countdownFromTargetDate","eventDate","getCountdownDuration","setState","onDatetimeSet","clearInterval","setInterval","moment","diff","now","a","getTheme","themeData","this","data","React","Component","dotenv","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAIaA,EAAb,+HACI,2FACUC,EAAsBC,2EADhC,sBAG2B,IAAIC,MAAM,kCAHrC,wBAMYC,EAA2B,IAAIC,SAEzBC,IAAI,oBAAqB,KAR3C,SAU6BC,MAAMN,EAAa,CACxCO,OAAQ,MACRC,QAASL,IAZjB,cAUYM,EAVZ,iBAemBA,EAASC,OAf5B,2EAiBMC,QAAQC,IAAR,MAjBN,0DADJ,6D,uBCFaC,EAAYC,IAAOC,IAAV,iLACN,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,cAMjC,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,KAAKC,sBCPxBC,EAA2BR,IAAOC,IAAV,8IAQxBQ,EAAuBT,IAAOU,GAAV,gD,OCFpBC,EAAY,SAACT,GACxB,IAAMU,EAAWV,EAAMU,SAEjBC,EAAOD,GAAYA,EAASC,OAC5BC,EAAQF,GAAYA,EAASE,QAC7BC,EAAOH,GAAYA,EAASI,UAC5BC,EAAML,GAAYA,EAASM,UAE3BC,OAAwBC,IAARH,GAAqBA,EAAM,EAEjD,OACE,cAACT,EAAD,UACE,cAACC,EAAD,UACGG,QAAoBQ,IAARH,EACTE,EACE,gBADW,UAETN,EAFS,iBAEIC,EAFJ,YAEaC,EAFb,YAEqBE,GAClC,oC,iBCvBCI,EAA4BrB,IAAOC,IAAV,oDCSzBqB,G,MAAsB,SAACpB,GAChC,OACI,eAACmB,EAAD,WACI,uDACA,cAAC,IAAD,CAAoBE,MAAOrB,EAAMqB,MAAOC,SAAUtB,EAAMsB,gBCbvDC,EAAezB,IAAO0B,OAAV,sQACT,SAAAxB,GAAK,OAAIA,EAAMC,MAAMuB,OAAOC,oBASjC,SAAAzB,GAAK,OAAIA,EAAMC,MAAMuB,OAAOE,cACtB,SAAA1B,GAAK,OAAIA,EAAMC,MAAMuB,OAAOG,eAGhCC,EAAY9B,IAAO+B,IAAV,sGACX,SAAA7B,GAAK,OAAIA,EAAMC,MAAMuB,OAAOM,sBAG1B,SAAA9B,GAAK,OAAIA,EAAMC,MAAMuB,OAAOO,qBCjB5BC,EAAS,WAClB,OACI,eAACT,EAAD,WACI,cAACK,EAAD,CAAWK,IAAI,mBACf,yECGNC,EAAY,IAAInD,EAQhBoD,E,4MACIC,WAAqB,E,EAC7BC,MAAoB,CAClBpC,MAAO,M,EAiBTqC,wBAA0B,SAACC,GAAD,OAAwB,WAChD,IAAM7B,EAA4B,EAAK8B,qBAAqBD,GAE5D,EAAKE,SAAS,CAAE/B,e,EAGlBgC,cAAgB,SAACH,GACf,EAAKE,SAAS,CAACF,cAEfI,cAAc,EAAKP,YAEnB,EAAKA,WAAaQ,YAAY,EAAKN,wBAAwBO,IAAON,IAAa,M,EAGjFC,qBAAuB,SAACD,GAAD,OAAyCA,EAAY7B,mBAAS6B,EAAUO,KAAKD,IAAOE,QAAU,M,8FA5BrH,4BAAAC,EAAA,+EAE4Bd,EAAIe,WAFhC,OAEUC,EAFV,OAIIC,KAAKV,SAAS,CAAExC,MAAOiD,IAJ3B,gDAMIvD,QAAQC,IAAR,MANJ,yD,wFAUA,WACE+C,cAAcQ,KAAKf,c,oBAmBrB,WACE,IAAMgB,EAAOD,KAAKd,MAAMpC,OAASkD,KAAKd,MAAMpC,MAAMmD,MAAQD,KAAKd,MAAMpC,MAAMmD,KAAKA,KAEhF,OACED,KAAKd,MAAMpC,OACT,cAAC,IAAD,CAAeA,MAAOmD,EAAtB,SACE,eAACvD,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAqBwB,MAAO8B,KAAKd,MAAME,UAAWjB,SAAU6B,KAAKT,gBACjE,cAAC,EAAD,CAAWhC,SAAUyC,KAAKd,MAAM3B,oB,GA7C1B2C,IAAMC,WAqDTnB,I,eClEfoB,EAAOC,SAEPC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.50ca6110.chunk.js","sourcesContent":["export interface IApi {\n    getTheme: () => Promise<any>;\n}\n\nexport class Api implements IApi {\n    public async getTheme(): Promise<any> {\n        const themeApiUrl: string = process.env.REACT_APP_THEME_API_URL as string;\n\n        if(!themeApiUrl) throw new Error('Theme API Url is not specified');\n\n        try {\n          const headersInit: HeadersInit = new Headers();\n\n          headersInit.set('X-Organization-Id', '1');\n\n          const response = await fetch(themeApiUrl, {\n            method: 'GET',\n            headers: headersInit\n          });\n\n          return await response.json()\n        } catch (error) {\n          console.log(error)\n        }\n    }\n}","import styled from 'styled-components';\n\nexport const StyledApp = styled.div`\n  background: ${props => props.theme.global.body_color};\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: center;\n  height: 100vh;\n  color: ${props => props.theme.text.primary_text_color};\n`;\n","import styled from 'styled-components';\n\nexport const StyledCountdownContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-bottom: 2rem;\n  height: 100%;\n`;\n\nexport const StyledCountdownTitle = styled.h3`\n  font-size: 2rem;\n`;\n","import { Duration } from 'moment';\nimport React from 'react';\nimport { StyledCountdownContainer, StyledCountdownTitle } from './styles';\n\nexport interface CountdownProps {\n  duration?: Duration;\n}\n\nexport const Countdown = (props: CountdownProps) => {\n  const duration = props.duration\n\n  const days = duration && duration.days();\n  const hours = duration && duration.hours();\n  const mins = duration && duration.minutes();\n  const sec = duration && duration.seconds();\n\n  const isEvenReached = sec !== undefined && sec < 0;\n\n  return (\n    <StyledCountdownContainer>\n      <StyledCountdownTitle>\n        {duration && sec !== undefined\n          ? isEvenReached \n            ? 'Event Reached' \n            :`${days} days ${hours}:${mins}:${sec}`\n          : 'Target Date is Not Specified'}\n      </StyledCountdownTitle>\n    </StyledCountdownContainer>\n  );\n};\n\n","import styled from 'styled-components';\n\nexport const StyledCountdownInputStart = styled.div`\n  margin-bottom: 2rem;\n`;\n","import { Moment } from 'moment';\nimport React from 'react';\nimport ReactDatetimeClass from \"react-datetime\";\nimport { StyledCountdownInputStart } from './styles';\nimport \"react-datetime/css/react-datetime.css\";\n\nexport interface CountdownInputStartProps {\n    onChange: (value: Moment | string) => void;\n    value?: Moment;\n}\n\nexport const CountdownInputStart = (props: CountdownInputStartProps) => {\n    return (\n        <StyledCountdownInputStart>\n            <h3>Select Event Datetime</h3>\n            <ReactDatetimeClass value={props.value} onChange={props.onChange}></ReactDatetimeClass>\n        </StyledCountdownInputStart>\n    );\n};","import styled from 'styled-components';\n\nexport const StyledHeader = styled.header`\n  background: ${props => props.theme.header.background_color};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 2rem;\n  margin-bottom: 2rem;\n  width: 100%;\n  text-align: center;\n  color: ${props => props.theme.header.font_color};\n  font-family: ${props => props.theme.header.font_family};\n`;\n\nexport const StyledImg = styled.img`\n  width: ${props => props.theme.header.desktop_logo_width}px;\n\n  @media (max-width: 768px) {\n    width: ${props => props.theme.header.mobile_logo_width}px;\n  }\n`;","import React from 'react';\nimport { StyledHeader, StyledImg} from './styles';\n\nexport const Header = () => {\n    return (\n        <StyledHeader>\n            <StyledImg src=\"koala-logo.png\" />\n            <h1>Koala Web Engineer Coding Challenge</h1>\n        </StyledHeader>\n    );\n};","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { Api, IApi } from './services/apis';\nimport moment, { Moment, duration, Duration } from 'moment';\nimport { StyledApp } from './styles';\n// Components\nimport { Countdown } from './components/countdown';\nimport { CountdownInputStart } from './components/countdown-input-start';\nimport { Header } from './components/header';\n\nconst api: IApi = new Api();\n\ninterface StateProps {\n  theme: any;\n  duration?: Duration;\n  eventDate?: Moment;\n}\n\nclass App extends React.Component {\n  private intervalId: number = 0;\n  state: StateProps = {\n    theme: null\n  };\n\n  async componentDidMount() {\n    try {\n      const themeData = await api.getTheme();\n\n      this.setState({ theme: themeData });\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.intervalId);\n  }\n\n  countdownFromTargetDate = (eventDate?: Moment) => () => {\n    const duration: Duration | null = this.getCountdownDuration(eventDate);\n\n    this.setState({ duration });\n  }\n\n  onDatetimeSet = (eventDate?: Moment | string) => {\n    this.setState({eventDate});\n\n    clearInterval(this.intervalId);\n\n    this.intervalId = setInterval(this.countdownFromTargetDate(moment(eventDate)), 1000);\n  }\n\n  getCountdownDuration = (eventDate?: Moment): Duration | null => eventDate ? duration(eventDate.diff(moment.now())) : null;\n    \n  render() {\n    const data = this.state.theme && this.state.theme.data && this.state.theme.data.data;\n\n    return (\n      this.state.theme && (\n        <ThemeProvider theme={data}>\n          <StyledApp>\n            <Header/>\n            <CountdownInputStart value={this.state.eventDate} onChange={this.onDatetimeSet}/>\n            <Countdown duration={this.state.duration}/>\n          </StyledApp>\n        </ThemeProvider>\n      )\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport dotenv from 'dotenv';\n\ndotenv.config()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}